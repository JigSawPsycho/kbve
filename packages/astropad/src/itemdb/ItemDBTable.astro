---
import { z } from 'zod';

const bonusesSchema = z.object({
  armor: z.number().optional(),
  intelligence: z.number().optional(),
  health: z.number().optional(),
  mana: z.number().optional(),
});

const IObjectSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  category: z.string().optional(),
  description: z.string().optional(),
  img: z.string().optional(),
  bonuses: bonusesSchema.optional(),
  durability: z.number().optional(),
  weight: z.number().optional(),
  equipped: z.boolean().optional(),
  consumable: z.boolean().optional(),
  effects: z.string().optional(),
  stackable: z.boolean().optional(),
  rarity: z.string().optional(),
  levelRequirement: z.number().optional(),
  price: z.number().optional(),
  cooldown: z.number().optional(),
  action: z.string().optional(),
  craftingMaterials: z.array(z.string()).optional(),
});

type ItemDBType = z.infer<typeof IObjectSchema>[];

const { itemdb } = Astro.props;

let validatedItemDB: ItemDBType = [];
try {
  validatedItemDB = itemdb.map((item: unknown) => IObjectSchema.parse(item));
} catch (error) {
  console.error("Validation Error:", error);
}

---

<div class="container mx-auto p-4">
  <h1 class="text-3xl font-bold mb-4">Food Items Database</h1>
  <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
    {validatedItemDB.map(item => (
      <div id={item.id} class="bg-white shadow-md rounded-lg p-4 flex flex-col">
        <h2 class="text-2xl font-bold mb-2">{item.name}</h2>
        {item.img && <img src={item.img} alt={item.name} class="mb-2 w-full h-48 object-cover rounded-md" />}
        <p class="mb-2"><strong>Type:</strong> {item.type}</p>
        {item.category && <p class="mb-2"><strong>Category:</strong> {item.category}</p>}
        {item.description && <p class="mb-2"><strong>Description:</strong> {item.description}</p>}
        {item.bonuses && (
          <div class="mb-2">
            <strong>Bonuses:</strong>
            <ul class="list-disc list-inside">
              {Object.entries(item.bonuses).map(([key, value]) => (
                <li id={key}>{key}: {value}</li>
              ))}
            </ul>
          </div>
        )}
        {item.durability && <p class="mb-2"><strong>Durability:</strong> {item.durability}</p>}
        {item.weight && <p class="mb-2"><strong>Weight:</strong> {item.weight}</p>}
        {item.consumable !== undefined && <p class="mb-2"><strong>Consumable:</strong> {item.consumable ? 'Yes' : 'No'}</p>}
        {item.effects && <p class="mb-2"><strong>Effects:</strong> {item.effects}</p>}
        {item.stackable !== undefined && <p class="mb-2"><strong>Stackable:</strong> {item.stackable ? 'Yes' : 'No'}</p>}
        {item.rarity && <p class="mb-2"><strong>Rarity:</strong> {item.rarity}</p>}
        {item.levelRequirement && <p class="mb-2"><strong>Level Requirement:</strong> {item.levelRequirement}</p>}
        {item.price && <p class="mb-2"><strong>Price:</strong> {item.price}</p>}
        {item.cooldown && <p class="mb-2"><strong>Cooldown:</strong> {item.cooldown} seconds</p>}
      </div>
    ))}
  </div>
</div>