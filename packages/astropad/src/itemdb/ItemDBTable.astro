---
// bg-[var(--sl-color-black)]
import { z } from 'zod';

const bonusesSchema = z.object({
  armor: z.number().optional(),
  intelligence: z.number().optional(),
  health: z.number().optional(),
  mana: z.number().optional(),
});

const IObjectSchema = z.object({
  id: z.string(),
  name: z.string(),
  type: z.string(),
  category: z.string().optional(),
  description: z.string().optional(),
  img: z.string().optional(),
  bonuses: bonusesSchema.optional(),
  durability: z.number().optional(),
  weight: z.number().optional(),
  equipped: z.boolean().optional(),
  consumable: z.boolean().optional(),
  effects: z.string().optional(),
  stackable: z.boolean().optional(),
  rarity: z.string().optional(),
  levelRequirement: z.number().optional(),
  price: z.number().optional(),
  cooldown: z.number().optional(),
  action: z.string().optional(),
  craftingMaterials: z.array(z.string()).optional(),
  credits: z.string().optional(),
});

type ItemDBType = z.infer<typeof IObjectSchema>[];

const { itemdb } = Astro.props;

let validatedItemDB: ItemDBType = [];
try {
  validatedItemDB = itemdb.map((item: unknown) => IObjectSchema.parse(item));
} catch (error) {
  console.error('Validation Error:', error);
}
---

<div class="container mx-auto p-4">
  <h1 class="text-3xl font-bold mb-4">Food Items Database</h1>
  <div class="space-y-4">
    {
      validatedItemDB.map((item) => (
        <div
          id={item.id}
          class="flex flex-col md:flex-row bg-[var(--sl-color-black)] shadow-md rounded-lg p-4"
        >
          <div class="flex flex-col flex-grow">
            <p class="text-lg font-bold object-contain">
              {item.name}{' '}
              {item.img && (
                <img
                  src={item.img}
                  alt={item.name}
                  class="h-[32px] rounded-md"
                />
              )}
            </p>

            <div class="flex flex-wrap mt-2">
              <div class="w-full md:w-1/2 lg:w-1/3 p-1">
                <p>
                  <strong>Type:</strong>{' '}
                  <span class="capitalize">{item.type}</span>
                </p>
                {item.category && (
                  <p>
                    <strong>Category:</strong> {item.category}
                  </p>
                )}
                {item.description && (
                  <p>
                    <strong>Description:</strong> {item.description}
                  </p>
                )}
                {item.durability !== undefined && (
                  <p>
                    <strong>Durability:</strong> {item.durability}
                  </p>
                )}
                {item.weight !== undefined && (
                  <p>
                    <strong>Weight:</strong> {item.weight}
                  </p>
                )}
                {item.consumable !== undefined && (
                  <p>
                    <strong>Consumable:</strong>{' '}
                    {item.consumable ? 'Yes' : 'No'}
                  </p>
                )}
              </div>
              <div class="w-full md:w-1/2 lg:w-1/3 p-1">
                {item.effects && (
                  <p>
                    <strong>Effects:</strong> {item.effects}
                  </p>
                )}
                {item.stackable !== undefined && (
                  <p>
                    <strong>Stackable:</strong> {item.stackable ? 'Yes' : 'No'}
                  </p>
                )}
                {item.rarity && (
                  <p>
                    <strong>Rarity:</strong> {item.rarity}
                  </p>
                )}
                {item.levelRequirement && (
                  <p>
                    <strong>Level Requirement:</strong> {item.levelRequirement}
                  </p>
                )}
                {item.price && (
                  <p>
                    <strong>Price:</strong> {item.price}
                  </p>
                )}
                {item.cooldown !== undefined && (
                  <p>
                    <strong>Cooldown:</strong> {item.cooldown} seconds
                  </p>
                )}
              </div>
              <div class="w-full md:w-1/2 lg:w-1/3 p-1">
                {item.bonuses && (
                  <div>
                    <strong>Bonuses:</strong>
                    <ul class="list-disc list-inside">
                      {Object.entries(item.bonuses).map(([key, value]) => (
                        <li id={key}>
                          {key}: {value}
                        </li>
                      ))}
                    </ul>
                  </div>
                )}

                <div>
                  {item.credits && (
                    <div>
                      <p><strong>Credits:</strong> {item.credits}</p>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</div>
