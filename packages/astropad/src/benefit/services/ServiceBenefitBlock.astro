---
import { getCollection } from 'astro:content';
import { z } from 'zod';

interface Props {
  collectionID: string;
  collectionTag: string;
  featured?: boolean;
}

const statSchema = z.object({
  title: z.string(),
  data: z.string(),
  html: z.string().optional(),
});

const { collectionID, collectionTag, featured = true } = Astro.props;

const servicesCollection = await getCollection(collectionID);

const servicesEntries = servicesCollection.filter(
  (entry: { data: { tags: string | string[] } }) =>
    Array.isArray(entry.data.tags) &&
    entry.data.tags.includes(collectionTag) &&
    (featured ? entry.data.tags.includes('featured') : true)
);

const filteredItems = servicesEntries.map(
  (entry: {
    slug: any;
    data: {
      [x: string]: any;
      unsplash: any;
      title: any;
      description: any;
      tags: any;
      img: any;
      lottie: any;
      stats: any;
      button: any;
    };
  }) => ({
    id: entry.slug,
    slug: entry.slug,
    unsplash: entry.data.unsplash,
    name: entry.data.title,
    description: entry.data.description,
    tags: entry.data.tags,
    img: entry.data.img,
    lottie: entry.data.lottie,
    stats: entry.data['stats']
      ? entry.data['stats'].map((stat: any) => statSchema.parse(stat))
      : [],
    button: entry.data.button,
  })
);

const hasItems = filteredItems.length > 0;
const displayItems = hasItems
  ? filteredItems.map(
      (item: {
        id?: string;
        name?: string;
        slug?: string;
        description?: string;
        unsplash?: string;
        img?: string;
        lottie?: string;
        stats?: { title: string; data: string; html?: string }[];
        button?: string;
      }) => ({
        id: item.id || item.slug || 'missing-id',
        slug: item.slug,
        name: item.name || item.slug || 'Missing id, name, or slug',
        description: item.description || 'No description available',
        unsplash: item.unsplash || '',
        lottie:
          item.lottie ||
          `
        <dotlottie-player
				autoplay
				loop
				class="w-24 md:w-48 lg:w-96 aspect-video"
				mode="normal"
				src="https://kbve.com/assets/lottie/beer.lottie">
			</dotlottie-player>`,
        img: item.img || '',
        stats: item.stats || [],
        button:
          item.button ||
          `
       <button class="relative rounded px-5 py-2.5 overflow-hidden group bg-cyan-500 relative hover:bg-gradient-to-r hover:from-cyan-500 hover:to-cyan-400 text-white hover:ring-2 hover:ring-offset-2 hover:ring-cyan-400 transition-all ease-out duration-300">
<span class="absolute right-0 w-8 h-32 -mt-12 transition-all duration-1000 transform translate-x-12 bg-white opacity-10 rotate-12 group-hover:-translate-x-96 ease"></span>
<span class="relative">Default Button</span>
</button>
        `,
      })
    )
  : [];
---

<section class="m-4 p-4 lg:p-8 text-gray-100">
  <div class="container mx-auto space-y-12">
    {
      hasItems ? (
        displayItems.map(
          (
            item: {
              id: string | null | undefined;
              name: string;
              description: string;
              unsplash: string;
              img: string;
              lottie: string;
              stats: { title: string; data: string; html?: string }[];
              button: string;
            },
            index: number
          ) => (
            <div
              class={`flex flex-col overflow-hidden rounded-md shadow-sm lg:${index % 2 === 0 ? 'flex-row' : 'flex-row'} bg-cover max-h-[500px]`}
              style={`background-image: url(https://images.unsplash.com/photo-${item.unsplash}?fit=crop&w=1400&h=500&q=75)`}
              id={item.id}
            >
              <div class={`flex flex-col justify-center flex-1 p-2 md:p-6`}>
                <div class="bg-cyan-400/90 p-2 md:p-4 inline-block">
                  <h3 class="text-lg lg:text-3xl font-bold">{item.name}</h3>
                </div>
                <div class="bg-cyan-400/60 p-2 md:p-4 inline-block">
                  <p class="my-2 md:my-6 text-sm md:text-md text-gray-200 line-clamp-3">{item.description}</p>
                </div>

                <div class="flex flex-wrap bg-cyan-400/10 p-1 md:p-4 space-x-4 scale-75 md:scale-100">
                  {item.stats.map((stat, i) => (
                    <div class="flex items-center flex-col space-x-2">
                      <div class="text-sm md:text-xl font-semibold">{stat.title}</div>
                      <div class="text-gray-200">{stat.data}</div>
                      {stat.html && <Fragment set:html={stat.html} />}
                    </div>
                  ))}
                </div>
                <div class="md:w-96 scale-75 m-4 md:scale-110">
                  <Fragment set:html={item.button} />
                </div>
              </div>

              <div class="object-scale-down shrink">
                <Fragment set:html={item.lottie} />
              </div>
            </div>
          )
        )
      ) : (
        <div>No items found with the tag "{collectionTag}"</div>
      )
    }
  </div>
</section>
