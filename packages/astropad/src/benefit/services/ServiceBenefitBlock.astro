---
import { getCollection } from 'astro:content';

interface Props {
  collectionID: string;
  collectionTag: string;
  featured?: boolean;
}

const { collectionID, collectionTag, featured = true } = Astro.props;

const servicesCollection = await getCollection(collectionID);

const servicesEntries = servicesCollection.filter(
  (entry: { data: { tags: string | string[] } }) =>
    Array.isArray(entry.data.tags) &&
    entry.data.tags.includes(collectionTag) &&
    (featured ? entry.data.tags.includes('featured') : true)
);

const filteredItems = servicesEntries.map(
  (entry: {
    slug: any;
    data: {
      [x: string]: any;
      unsplash: any;
      title: any;
      description: any;
      tags: any;
      img: any;
    };
  }) => ({
    id: entry.slug,
    unsplash: entry.data.unsplash,
    name: entry.data.title,
    description: entry.data.description,
    tags: entry.data.tags,
    img: entry.data.img,
    lottie: entry.data.lottie,
    stats: entry.data['stats'] || [],
  })
);

const hasItems = filteredItems.length > 0;
const displayItems = hasItems
  ? filteredItems.map(
      (item: {
        id?: string;
        name?: string;
        slug?: string;
        description?: string;
        unsplash?: string;
        img?: string;
        lottie?: string;
      }) => ({
        id: item.id || item.slug || 'missing-id',
        name: item.name || item.slug || 'Missing id, name, or slug',
        description: item.description || 'No description available',
        unsplash: item.unsplash || '',
        lottie: item.lottie || 'https://kbve.com/assets/lottie/beer.lottie',
        img: item.img || '',
      })
    )
  : [];
---

<section class="m-4 p-4 lg:p-8 text-gray-100">
  <div class="container mx-auto space-y-12">
    {
      hasItems ? (
        displayItems.map(
          (
            item: {
              id: string | null | undefined;
              name: string;
              description: string;
              unsplash: string;
              img: string;
              lottie: string;
            },
            index: number
          ) => (
            <div
              class={`flex flex-col overflow-hidden rounded-md shadow-sm lg:${index % 2 === 0 ? 'flex-row' : 'flex-row-reverse'} bg-cover`}
              style={`background-image: url(https://images.unsplash.com/photo-${item.unsplash}?fit=crop&w=1400&h=500&q=75)`}
              id={item.id}>

              
              <dotlottie-player
				autoplay
				loop
				class="w-24 md:w-48 lg:w-96 aspect-video"
				mode="normal"
				src={item.lottie}>
			</dotlottie-player>

            <div class="flex flex-col justify-center flex-1 p-6">
                <div class="bg-cyan-400/20 p-4 inline-block">
                  <h3 class="text-3xl font-bold">
                    {item.name}
                  </h3>
                </div>
                <div class="bg-cyan-400/10 p-4 inline-block">
                  <p class="my-6 dark:text-gray-200">
                    {item.description}
                  </p>
                </div>
                <button type="button" class="self-start">
                  Action
                </button>
              </div>
            </div>
          )
        )
      ) : (
        <div>No items found with the tag "{collectionTag}"</div>
      )
    }
  </div>
</section>
