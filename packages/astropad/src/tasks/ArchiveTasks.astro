---
// [IMPORTS]
import { z } from 'zod';

const ITaskSchema = z.object({
  id: z.string(),
  title: z.string(),
  description: z.string().optional(),
  dueDate: z.date().optional(),
  completed: z.boolean().default(false),
  priority: z.number().int().min(0).max(5).default(0), // Number-based priority from 0 to 5, default 0
  tags: z.array(z.string()).optional(),
  assignee: z.string().optional(),
});

type ArchiveTaskType = z.infer<typeof ITaskSchema>[];

const { tasks = [] } = Astro.props;

let validatedTasks: ArchiveTaskType = [];
try {
  validatedTasks = tasks.map((item: any) => {
    if (item.dueDate && typeof item.dueDate === 'string') {
      item.dueDate = new Date(item.dueDate);
    }
    return ITaskSchema.parse(item);
  });
} catch (error) {
  console.error('Validation Error:', error);
}
---

<div class="container mx-auto p-4">
  <h1 class="text-3xl font-bold mb-4" id="tasks">Archived Task List</h1>
  <div class="space-y-4">
    {
      validatedTasks.map((task) => (
        <div
          id={task.id}
          class="flex flex-col md:flex-row bg-[var(--sl-color-black)] shadow-md rounded-lg p-4"
        >
          <div class="flex flex-col flex-grow">
            <p class="text-lg font-bold">{task.title} </p>

            <div class="flex flex-wrap mt-2">
              <div class="w-full md:w-1/2 lg:w-1/3 p-1">
                <p>
                  <strong>ID:</strong> {task.id}
                </p>
                {task.description && (
                  <p>
                    <strong>Description:</strong> {task.description}
                  </p>
                )}
                {task.dueDate && (
                  <p>
                    <strong>Due Date:</strong> {task.dueDate.toDateString()}
                  </p>
                )}
                <p>
                  <strong>Completed:</strong> {task.completed ? 'Yes' : 'No'}
                </p>
              </div>
              <div class="w-full md:w-1/2 lg:w-1/3 p-1">
                <p>
                  <strong>Priority:</strong> {task.priority}
                </p>
                {task.assignee && (
                  <p>
                    <strong>Assignee:</strong> {task.assignee}
                  </p>
                )}
                {task.tags && task.tags.length > 0 && (
                  <p>
                    <strong>Tags:</strong> {task.tags.join(', ')}
                  </p>
                )}
              </div>
            </div>
          </div>
        </div>
      ))
    }
  </div>
</div>
