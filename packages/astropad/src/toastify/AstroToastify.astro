---
export interface Props {
	data?: string; // Optional data to show a toast immediately, but not necessary
}
const { data } = Astro.props;


---

<astro-toastify id="toastify-container" data-toastify={data}>
	<!-- Container for any future expansion or styling -->
</astro-toastify>

<script is:inline type="module">
	class AstroToastify extends HTMLElement {
		constructor() {
			super();
			const _data = this.dataset.toastify;

			// Initialize Toastify globally when the window loads
			window.addEventListener('load', (event) => {
				this.lazyLoadToastify(_data);
			});
		}

		async lazyLoadToastify(_data) {
			// Check if Toastify is already loaded globally
			if (!window.Toastify) {
				// Dynamically load the Toastify script
				const script = document.createElement('script');
				script.src = 'https://cdn.jsdelivr.net/npm/toastify-js';
				script.async = true;
				script.onload = () => {
					console.log('Toastify loaded globally!');
					// Once loaded, make Toastify globally accessible
					window.Toastify = Toastify;
					// Optionally show a toast if data is passed
					if (_data) {
						this.showToast(_data);
					}
				};
				document.head.appendChild(script);
			} else {
				// Toastify is already available globally
				if (_data) {
					this.showToast(_data);
				}
			}
		}

		showToast(_data) {
			// Show toast with the provided data
			if (window.Toastify && _data) {
				Toastify({
					text: _data,
					duration: 3000,
					close: true,
					gravity: 'top',
					position: 'right',
					backgroundColor: '#4CAF50',
				}).showToast();
			}
		}
	}

	// Define the custom element if it hasn't been defined yet
	if (!customElements.get('astro-toastify')) {
		customElements.define('astro-toastify', AstroToastify);
	}
</script>
