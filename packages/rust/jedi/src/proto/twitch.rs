// This file is @generated by prost-build.
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchEventObject {
    #[prost(string, tag = "29")]
    pub origin: ::prost::alloc::string::String,
    #[prost(bool, tag = "30")]
    pub relay_generated: bool,
    #[prost(string, tag = "31")]
    pub id: ::prost::alloc::string::String,
    #[prost(int64, tag = "32")]
    pub timestamp: i64,
    #[prost(
        oneof = "twitch_event_object::Object",
        tags = "1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"
    )]
    pub object: ::core::option::Option<twitch_event_object::Object>,
}
/// Nested message and enum types in `TwitchEventObject`.
pub mod twitch_event_object {
    #[derive(serde::Serialize, serde::Deserialize)]
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Object {
        #[prost(message, tag = "1")]
        Chat(super::TwitchChatMessage),
        #[prost(message, tag = "2")]
        Join(super::TwitchJoinEvent),
        #[prost(message, tag = "3")]
        Part(super::TwitchPartEvent),
        #[prost(message, tag = "4")]
        Notice(super::TwitchNoticeEvent),
        #[prost(message, tag = "5")]
        Ping(super::TwitchPing),
        #[prost(message, tag = "6")]
        Pong(super::TwitchPong),
        #[prost(message, tag = "7")]
        Moderation(super::TwitchModerationEvent),
        #[prost(message, tag = "8")]
        Sub(super::TwitchSubEvent),
        #[prost(message, tag = "9")]
        Raid(super::TwitchRaidEvent),
        #[prost(message, tag = "10")]
        Cheer(super::TwitchCheerEvent),
        #[prost(message, tag = "11")]
        Redemption(super::TwitchRedemptionEvent),
    }
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchChatMessage {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub sender: ::core::option::Option<TwitchSender>,
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    #[prost(map = "string, string", tag = "4")]
    pub tags: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchJoinEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<TwitchSender>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchPartEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub user: ::core::option::Option<TwitchSender>,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchNoticeEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub message: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub notice_type: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchModerationEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub action: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub target_user: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub issued_by: ::prost::alloc::string::String,
    #[prost(string, tag = "5")]
    pub reason: ::prost::alloc::string::String,
    #[prost(int64, tag = "6")]
    pub duration: i64,
    #[prost(string, tag = "7")]
    pub source_message_id: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchSubEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(bool, tag = "3")]
    pub is_gift: bool,
    #[prost(int32, tag = "4")]
    pub months: i32,
    /// e.g. 1, 2, 3
    #[prost(int32, tag = "5")]
    pub tier: i32,
    #[prost(string, tag = "6")]
    pub message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchRaidEvent {
    #[prost(string, tag = "1")]
    pub from_channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub to_channel: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub raider: ::prost::alloc::string::String,
    #[prost(int32, tag = "4")]
    pub viewer_count: i32,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchCheerEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(int32, tag = "3")]
    pub bits: i32,
    #[prost(string, tag = "4")]
    pub message: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchRedemptionEvent {
    #[prost(string, tag = "1")]
    pub channel: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub reward_title: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub user_input: ::prost::alloc::string::String,
}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TwitchPing {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TwitchPong {}
#[derive(serde::Serialize, serde::Deserialize)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TwitchSender {
    #[prost(string, tag = "1")]
    pub nick: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub user: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub host: ::prost::alloc::string::String,
    #[prost(string, tag = "4")]
    pub id: ::prost::alloc::string::String,
}
