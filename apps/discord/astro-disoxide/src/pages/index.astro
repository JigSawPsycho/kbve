---
import Layout from "src/layout/Layout.astro"
---
<Layout title="Dashboard" description="DiscordSH Dashboard">
		<div
			x-data="{ sidebarOpen: true }"
			class="flex h-screen min-h-0 overflow-hidden">
			<!-- Sidebar -->
			<aside
				:class="sidebarOpen ? 'translate-x-0' : '-translate-x-full'"
				class="fixed z-50 w-64 h-full bg-gray-800 text-white flex flex-col p-4 transform transition-transform duration-200 ease-in-out">
				<div class="flex items-center justify-between">
					<h1 class="text-2xl font-bold mb-6 text-purple-400">
						DiscordSH
					</h1>
					<span
						class="inline-flex shrink-0 rounded-full border border-purple-500 bg-purple-800 p-1">
						<button
							class="text-purple-200"
							@click="sidebarOpen = false">
							✕
						</button>
					</span>
				</div>

				<nav class="flex flex-col gap-3">
					<a href="#" class="hover:bg-gray-700 rounded px-3 py-2">
						Dashboard
					</a>
					<a href="#" class="hover:bg-gray-700 rounded px-3 py-2">
						Servers
					</a>
					<a href="#" class="hover:bg-gray-700 rounded px-3 py-2">
						Logs
					</a>
					<a href="#" class="hover:bg-gray-700 rounded px-3 py-2">
						Settings
					</a>
				</nav>

				<div class="mt-auto pt-6 border-t border-gray-700">
					<a
						href="#"
						class="text-sm text-gray-400 hover:text-purple-300">
						Logout
					</a>
				</div>
			</aside>

			<!-- Main Content -->
			<div
				class="flex-1 flex flex-col w-full min-h-0 transition-all duration-200 ease-in-out"
				:class="{ 'md:ml-64': sidebarOpen }">
				<!-- Header with toggle -->
				<header
					class="p-4 bg-gray-800 shadow flex items-center justify-between md:justify-start">
					<button
						class="text-gray-300 text-xl mr-4 hover:text-purple-400"
						@click="sidebarOpen = !sidebarOpen"
						aria-label="Toggle Sidebar">
						☰
					</button>
					<h2 class="text-2xl font-semibold text-purple-400">
						Welcome back, Commander
					</h2>
				</header>

				<!-- Page Content -->
				<main
					class="p-6 overflow-y-auto flex-1 perspective-[1000px] perspective-origin-center">
					<div
						class="grid gap-6 grid-cols-1 md:grid-cols-3 auto-rows-auto grid-flow-dense">
						<div
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1 md:col-span-2 md:row-span-2">
							<h3 class="text-sm text-gray-400">
								Active Servers
							</h3>
							<p class="text-xl font-bold text-purple-300">5</p>
						</div>

						<div
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1 md:col-span-1 md:row-span-1">
						<h3 class="text-sm text-gray-400">Online Users</h3>
							<p class="text-xl font-bold text-purple-300">213</p>
						</div>

						<div
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1 md:col-span-1 md:row-span-1">
						<h3 class="text-sm text-gray-400">Log Volume</h3>
							<p class="text-xl font-bold text-purple-300">
								37 MB
							</p>
						</div>

						<div
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1 md:col-span-2 md:row-span-2">
							<h3 class="text-sm text-gray-400">Metrics Data</h3>
							<p class="text-xl font-bold text-purple-300">
								Data MB
							</p>
						</div>

						<!-- Metrics Cube Card -->
						<div
							class="md:col-span-2 md:row-span-2 bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1">
							<div
								x-data="metricsCube"
								:class="{ 'cursor-progress': loading }"
								class="space-y-4">
								<!-- Toggle Button -->
								<button
									@click="open = !open"
									class="bg-purple-700 text-white px-4 py-2 rounded hover:bg-purple-600 shadow transition w-full sm:w-auto">
									Toggle Metrics
								</button>

								<!-- Metrics Grid -->
								<div
									x-show="open"
									class="grid gap-4 sm:grid-cols-2 md:grid-cols-3 auto-rows-fr">
									<template
										x-for="(metric, index) in dataEntries"
										:key="index">
										<div
											class="relative p-4 rounded-xl border border-purple-500/20 bg-gradient-to-br from-[#2b2740] to-[#312d4b] shadow-md hover:border-purple-400/50 transition transform hover:scale-[1.01]">
											<!-- Header -->
											<div
												class="flex items-center justify-between mb-1">
												<h4
													class="text-xs uppercase text-purple-400 tracking-wide"
													x-text="metric.key"></h4>
												<span
													class="text-[10px] text-purple-300 opacity-60">
													#
													<span
														x-text="index + 1"></span>
												</span>
											</div>

											<!-- Value -->
											<p
												class="text-2xl md:text-3xl font-semibold text-purple-100 leading-tight"
												x-text="Number(metric.value).toFixed(2)"></p>
										</div>
									</template>
								</div>
							</div>
						</div>
						<!-- END -->

						<div
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1 md:col-span-2 md:row-span-2">
							<h3 class="text-sm text-gray-400">Metrics Data</h3>
							<p class="text-xl font-bold text-purple-300">
								Data MB
							</p>
						</div>

						<!-- New WebSocket Card -->
						<div
							x-data="webSocketManager"
							class="bg-[#312d4b] p-4 rounded shadow-xl border-purple-500/20 hover:border-purple-500 border-1">
							<h3 class="text-sm text-gray-400 mb-2">
								WebSocket Control
							</h3>
							<div class="space-y-4">
								<!-- Form to Send Messages -->
								<form
									@submit.prevent="sendMessage"
									class="flex gap-2">
									<input
										x-model="message"
										type="text"
										placeholder="Type a message..."
										class="flex-1 bg-gray-700 text-white p-2 rounded focus:outline-none focus:ring-2 focus:ring-purple-500" />
									<button
										type="submit"
										class="bg-purple-700 text-white px-4 py-2 rounded hover:bg-purple-600 transition"
										:disabled="!message">
										Send
									</button>
								</form>

								<!-- Message Log -->
								<div
									class="h-40 overflow-y-auto bg-gray-800 p-2 rounded">
									<template
										x-for="(msg, index) in messages"
										:key="index">
										<p
											class="text-sm text-gray-300"
											x-text="msg"></p>
									</template>
									<p
										x-show="messages.length === 0"
										class="text-sm text-gray-500">
										No messages yet...
									</p>
								</div>
							</div>
						</div>

						<!-- END -->
					</div>
				</main>
			</div>
		</div>

		<script type="module">
			import Alpine from 'https://cdn.jsdelivr.net/npm/alpinejs@3.14.9/dist/module.esm.js';
			import {
				subscribeToTopic,
				useSharedWorkerCall,
			} from '/js/client.js';

			document.addEventListener('alpine:init', () => {
				Alpine.data('metricsCube', () => ({
					open: false,
					dataEntries: [],
					unsubscribe: null,
					loading: false,

					async init() {
						this.loading = true;

						const initial =
							await useSharedWorkerCall('fetch_metrics');
						this.dataEntries = initial;

						this.unsubscribe = subscribeToTopic(
							'metrics',
							(data) => {
								this.dataEntries = data;
								if (this.loading) this.loading = false;
							},
						);

						this.loading = false;
					},

					destroy() {
						if (this.unsubscribe) this.unsubscribe();
					},
				}));

				Alpine.data('webSocketManager', () => ({
					message: '',
					messages: [],
					unsubscribe: null,

					async init() {
						// Subscribe to WebSocket messages via shared worker
						this.unsubscribe = subscribeToTopic(
							'websocket',
							(data) => {
								this.messages.push(JSON.stringify(data));
							},
						);

						// Ensure connection is open
						await useSharedWorkerCall('connect_websocket');
					},

					destroy() {
						if (this.unsubscribe) this.unsubscribe();
					},

					async sendMessage() {
						if (!this.message.trim()) return;

						let parsed;
						try {
							parsed = JSON.parse(this.message);
						} catch (err) {
							this.messages.push('[Invalid JSON]');
							return;
						}

						await useSharedWorkerCall('send_websocket', parsed);
						this.messages.push(`→ ${this.message}`);
						this.message = '';
					},
				}));
			});

			Alpine.start();
		</script>
</Layout>