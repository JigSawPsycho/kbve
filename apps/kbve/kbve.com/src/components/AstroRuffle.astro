---
interface Props {
	swf: string; // Required prop
	className?: string; // Optional prop
}

// Extract props with default value for className
const { swf, className = 'w-full flex overflow-y-hidden' } = Astro.props as Props;
---

<!-- Component Template -->

<astro-ruffle data-swf={swf} data-className={className}>
	<div id="container" class={className}></div>
</astro-ruffle>


<!-- JavaScript for custom element -->
<script is:inline>
	class AstroRuffle extends HTMLElement {
		constructor() {
			super();

			// Read the message from the data attribute.
			const swf = this.dataset.swf;
			if (!swf) {
				console.error('No SWF URL found for AstroRuffle component.');
				return;
			}

			window.RufflePlayer = window.RufflePlayer || {};
			window.addEventListener('load', () => {
				const ruffle = window.RufflePlayer.newest();
				const player = ruffle.createPlayer();
				
				const container = document.getElementById('container');

				if (!container) {
					console.error('No container element found for AstroRuffle component.');
					return;
				}

				container.appendChild(player);
				player.load(swf);
				player.style.width = '100vw';
				player.style.height = '100vh';
				//player.setAttribute('allowFullscreen', 'true');
			});
		}
	}

	// Define the custom element if it hasn't been defined yet
	if (!customElements.get('astro-ruffle')) {
		customElements.define('astro-ruffle', AstroRuffle);
	}
</script>

<!-- Include Ruffle player script -->
<script is:inline src="https://unpkg.com/@ruffle-rs/ruffle"></script>
