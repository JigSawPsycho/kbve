name: Process Atlas Commands

on:
  issues:
    types: [opened]

permissions:
  issues: write
  contents: read

env:
  atlas_action: none
  YTID: ''
  GENRE: ''
  TITLE: ''

jobs:
  process_issue:
    name: 'Process Issue'
    runs-on: ubuntu-latest

    outputs:
      matched_action: ${{ steps.title-parser.outputs.action }}

    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install @kbve/devops

      - name: Check title of the ticket
        id: title-parser
        uses: actions/github-script@v7
        with:
          script: |
            const { _$gha_kbve_ActionProcess } = require('@kbve/devops');
            const title = context.payload.issue.title;
            try {
              const action = _$gha_kbve_ActionProcess(title);
              core.setOutput('action', action);
              core.setOutput('error', false);
            } catch (error) {
              core.setOutput('action', 'none');
              core.setOutput('error', true);
            }

      - name: Debug matched action
        run: |
          echo "Matched action is: ${{ steps.title-parser.outputs.action }}"

  handle_atlas:
    name: 'Handle Atlas Ticket'
    runs-on: ubuntu-latest
    needs: ['process_issue']
    if: needs.process_issue.outputs.matched_action == 'atlas_action'
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install @kbve/devops

      - name: Atlas Debug Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |

            const issue_number = context.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const body = '[DEBUG] Starting the handle atlas comment';

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: body
              });

  handle_music:
    name: 'Handle Music Ticket'
    runs-on: ubuntu-latest
    needs: ['process_issue']
    if: needs.process_issue.outputs.matched_action == 'music_action'
    outputs:
      YTID: ${{ steps.extract-info.outputs.YTID }}
      TITLE: ${{ steps.extract-info.outputs.TITLE }}
      GENRE: ${{ steps.extract-info.outputs.GENRE }}
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: |
          npm install @kbve/devops

      - name: Music Debug Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/github-script@v7
        with:
          script: |
            const issue_number = context.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const body = '[DEBUG] Processing [Music](https://kbve.com/music/) Action';

            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: body
              });

      - name: Call Groq for Music
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          KBVE_API: ''
        uses: actions/github-script@v7
        with:
          script: |
            const { _groq, extractYoutubeId } = require('@kbve/devops');
            const issue_number = context.issue.number;
            const repo = context.repo.repo;
            const owner = context.repo.owner;
            const system = '01J0YEVWK8ZA1Z0Q8B0GDG6871';
            const message = context.payload.issue.body;
            const kbve_api = process.env.KBVE_API;
            const model = 'mixtral-8x7b-32768';
            const sanitizationLevel = 4;

            try {
              const response = await _groq(system, message, kbve_api, model, sanitizationLevel);
              const formattedResponse = JSON.stringify(response, null, 2);

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `Atlas Music Response:\n\`\`\`json\n${formattedResponse}\n\`\`\``
              });

              const content = response.choices[0].message.content;

              const YTID = extractYoutubeId(message);

              const jsonMatch = content.match(/```json\n([\s\S]*?)\n```/);
              const extractedJson = jsonMatch ? jsonMatch[1] : null;

              let extractedInfoComment = "Extracted Song Information:\n";
              if (extractedJson) {
                extractedInfoComment += `\`\`\`json\n${extractedJson}\n\`\`\``;
              } else {
                extractedInfoComment += "Unable to extract song information from the response.";
              }

              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: extractedInfoComment
              });

              const { data: labels } = await github.rest.issues.listLabelsOnIssue({
                owner,
                repo,
                issue_number,
              });

              if (labels.some(label => label.name === '0')) {
                await github.rest.issues.removeLabel({
                  owner,
                  repo,
                  issue_number,
                  name: '0'
                });
              }
              if(extractedJson) {
                const extractedInfo = JSON.parse(extractedJson);
                core.exportVariable('YTID', extractedInfo.YTID || extractedInfo.youtube_id || YTID);
                core.exportVariable('TITLE', extractedInfo.title || '');
                core.exportVariable('GENRE', extractedInfo.genre || '');

                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels: ['2']
                });
              } else {
               
                await github.rest.issues.addLabels({
                  owner,
                  repo,
                  issue_number,
                  labels: ['1']
                });
              
              }
              
            } catch (error) {
              console.error('Error processing groq request:', error);
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: `Error processing groq request: ${error.message}`
              });
            }

      - name: Debug environment variables
        run: |
          echo "YTID: ${{ env.YTID }}"
          echo "TITLE: ${{ env.TITLE }}"
          echo "GENRE: ${{ env.GENRE }}"

      - name: Extract Info
        id: extract-info
        run: |
          echo "YTID=${{ steps.groq-call.outputs.YTID }}" >> $GITHUB_ENV
          echo "TITLE=${{ steps.groq-call.outputs.TITLE }}" >> $GITHUB_ENV
          echo "GENRE=${{ steps.groq-call.outputs.GENRE }}" >> $GITHUB_ENV
  
  
  execute_music_action:
    name: 'Execute Music Action'
    runs-on: ubuntu-latest
    needs: ['handle_music']
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
            version: 9
            run_install: false

      - name: Install pnpm dependencies
        run: pnpm install

      - name: Use Extracted Variables
        run: |
          echo "YTID: ${{ needs.handle_music.outputs.YTID }}"
          echo "TITLE: ${{ needs.handle_music.outputs.TITLE }}"
          echo "GENRE: ${{ needs.handle_music.outputs.GENRE }}"

      - name: KBVE Shell - Execute Music Edit for Jukebox
        uses: ./.github/actions/kbve-shell
        with:
          flag: "-nx kbve.com:music --args=\"--file=${{ needs.handle_music.outputs.GENRE }} --title='${{ needs.handle_music.outputs.TITLE }}' --ytid=${{ needs.handle_music.outputs.YTID }}\""
          create_pull_request: true
          github_token: ${{ secrets.GITHUB_TOKEN }}
          pull_request_title: 'music-action-ytid-${{ needs.handle_music.outputs.YTID }}'
          pull_request_body: |
              Execution of [Music](https://kbve.com/music/) Action.
              [Link to the issue ticket](${{
                github.event.issue.html_url
              }})